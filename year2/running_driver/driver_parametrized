#!/usr/bin/env python3

import argparse
import multiprocessing
from GWXtreme.parametrized_eos_sampler import mcmc_sampler
import numpy as np
import glob
import h5py
import time

parser = argparse.ArgumentParser()
parser.add_argument("-i_d", "--in_dir", action="store", help="Path of the input files directory.", type=str)
parser.add_argument("-w", "--nwalkers", action="store", help="Number of walkers to use for this job.", type=int)
parser.add_argument("-s", "--Nsamples", action="store", help="Number of samples to use for this job.", type=int)
parser.add_argument("-c", "--cores", action="store", help="Number of cores to use for this job.", type=int)
parser.add_argument("-o_d", "--out_dir", action="store", help="Path of the output files directory.", type=str)
parser.add_argument("-ch", "--checkpoint", action="store", help="Choose to load in walker starting points or let sampler make new ones")
args = parser.parse_args()

#Array Containing list of paths to the .dat files  containing the posterior samples for the events:

paths = np.array(glob.glob("files/{}*".format(args.in_dir)))
files = np.repeat("/bns_example_samples.dat", len(paths))
fnames = list(np.char.add(paths,files))

#Name of/ Path to file in which EoS parameter posterior samples will be saved:
outname='runs/{}Ap4_O3_injections'.format(args.out_dir)

start = time.time()

#Initialize Sampler Object:

"""For Piece wise polytrope"""

sampler=mcmc_sampler(fnames, {'logP':{'params':{"min":33.6-1,"max":34.5-1}},'gamma1':{'params':{"min":2.0,"max":4.5}},'gamma2':{'params':{"min":1.1,"max":4.5}},'gamma3':{'params':{"min":1.1,"max":4.5}}}, outname, nwalkers=args.nwalkers, Nsamples=args.Nsamples, ndim=4, spectral=False, npool=args.cores)

#Run, Save , Plot

# Not sure if DAG file can supply None, so False will do
if args.checkpoint == 'False': # Can't get commandline to supply actual False
    sampler.initialize_walkers() 
# Uses the last sample of each walker of latest run (supply .h5 file name as args.checkpoint)
else:
    hf = h5py.File(args.checkpoint, 'r')
    chains = np.array(hf.get('chains'))
    sampler.p0 = chains[-1]

sampler.run_sampler()
sampler.save_data()

end = time.time()
Time = (end - start) / 3600
print("Hours: {}".format(Time))

fig=sampler.plot(cornerplot={'plot':True,'true vals':None},p_vs_rho={'plot':True,'true_eos':'AP4'})
fig['corner'].savefig('runs/{}corner4_O3.png'.format(args.out_dir))
fig['p_vs_rho'][0].savefig('runs/{}eos4_O3.png'.format(args.out_dir))
